-- 生成 n 个随机数, IO [Float] 有点类似于 java 里面的 Future<Float] 概念：
-- 都是用一个黑盒方式对某个值进行封装，区别是Future表达异步概念, 而IO表达了某种底层机制（IO控制，超出语言抽象层面的实现机制）

:m System.Random
:{
randn :: Int -> IO [Float]
randn n 
 | n >0 = if n == 1 then r else r <> randn (n-1) -- 大于0
 | otherwise = return [] :: IO [Float] -- 等于0
 where r :: IO [Float] = (:[]) <$> randomIO -- 随机函数
:}
-- 结果测试
randn 10

-- IO 文件读取训练
-- 导入 IO　输入输出　文件操作模块
:m System.IO 
:{
-- 尝试读取文件
tryRead :: Handle -> IO [String]
tryRead h = check h >>= readLines [] where 
  -- 检测 文件状态 : 返回结果为IO的2元组(文件句柄, 文件读取状态:True已经到达文件末尾,False仍旧存在未读数据）
  check :: Handle -> IO (Handle, Bool)
  check h = (h,) <$> hIsEOF h -- (文件句柄, 文件读取状态:True已经到达文件末尾,False仍旧存在未读数据）
  -- 读取文件数据行
  readLines :: [String] -> (Handle, Bool) -> IO [String]
  readLines ret x = case x of
    --  注意  '.' infixl 9 比 '>>=' infixr 1,故 '.' 优先级高， 所以 (check h >>=) . readLines  优先计算
    -- 没有读到文件末尾，还有数据，则 hGetLine h 读取一行数据
    -- 读取一行数据并将该结果追加到ret结果的最后 即 ((ret++) . (:[])) 
    (h, False) ->  ((ret++) . (:[])) <$> hGetLine h >>= --  更新结果数据ret, 注意：>>=可视为OOP中链式编程里的'.'
       -- readLines接收更新后ret结果数据，并将生成的偏函数绑定>>=到check h的IO (Handle, Bool)文件状态之上
       -- 进而实现了在更新了文件读取状态IO (Handle, Bool)的新一轮递归调用，即 连续读取
       (check h >>=) . readLines  -- 一直读取，直到 没有数据为止的循环操作
       -- 已经读到文件末尾了
    _  -> hClose h >> return ret -- 关闭文件并返回结果
:}
-- 尝试读取文件
openFile "a.hs" ReadMode >>= tryRead

-- 全排列测试
:{
-- 生成一个元素集合全排列：集合论里的descartes积
cph :: [[a]] -> [[a]]
cph xx = go [[]] xx where
  go :: [[a]] -> [[a]] -> [[a]]
  go ret [] = ret
  go ret (x:xs) = go [ x':r' | x' <- x, r' <- ret] xs -- 每次从xx中提取一个x对ret进行树形展开
:}
-- 展示示例 [ComPreHension] 相当于数学中的集合论里的descartes积
let x = [1..3] in cph [x, x, x]

:m Data.Map -- Map 函数
:m Data.List -- nub 去重函数
-- 去重
let x = [-1,0,1] in nub $ cph [x, x, x] >>= return . sum

-- 计算频率
-- 开启containers包 以便 可以导入 Data.Map
:set -package containers
:m Data.Map
:m Data.List

-- 统计频率函数
freq= foldl (\m x -> Data.Map.insertWith (+) x 1 m) Data.Map.empty
-- 统计元素频率, 这里重新定义了 cph , :m Data.Map 清空当前会话
let x = [-1,0,1]; cph xx = case xx of {(x:xs) -> [p:q | p <- x, q <- cph xs]; _ -> [[]]}; in freq $ cph [x, x, x] >>= return . sum

-- 复制一个指定x对象,n次
rep :: (Ord t1, Num t1) => t1 -> t2 -> [t2]
rep n x = if n <1 then [] else x : rep (n-1) x
-- 结果测试
let x = [-1,0,1]; cph xx = case xx of {(x:xs) -> [p:q | p <- x, q <- cph xs]; _ -> [[]]}; in freq $ (cph $ rep 3 x) >>= return . sum

-- 语言原理
:{
let
  -- 符号化：编码 （ 汉字 采用 '偏旁部首部首': 横竖撇捺...，英语 采用 '罗马字母' : abcd..., 
  --   不同语言拥有自己独特的记录符号（notation) ，构造出 分组符号 即 单词语素 lexeme) 。
  --   比如 ：（丿,㇏）= 人 ，(h,u,m,a,n) = human, 而 [人，human] -> [客观世界里的人]
  -- 词典：将 `客观存在` 映射到 特定的 `单词符号` 的 关系映射 的集合，
  -- 所谓索引 是指 对 所组织&管理的对象集合 之中 的每个元素分配给某种采用特定形式进行编码符号,
  --  以方便后续 检索即定位与查找。比如：人类家族的排行，家庭管理的：老大、老二，
  --  班级管理的：学号，居民管理的：省份证号，银行存款管理的：存款账号，从研究分析角度通常采用
  --   系统化的结构性的概念名称 作为 对象索引，比如 IUPAC的有机分子的系统名 就是一种 物质对象索引
  --   比如 编码符号(索引):Propane-1,2,3-triol 就 对应着 甘油（具体物质,丙三醇：CH2OHCH2OHCH2OH）, 
  --   从应用角度 常用 【冠词】【概念名称】 来 表示或是说是 索引 某个具体的 概念 对象。
  --   比如: 一分子 甘油， 一个 苹果， 一瓶 辣椒 等. 冠词 一个分子, 一个 , 一瓶 表示了 对 概念的 
  --   在某种上下文中的 特定指代, 由此 实现了 抽象概念 与 特定 具体对象 的 相互对应(绑定关系:表达与被表达)
  -- 可以说,从 理解（符号空间->现实存在空间）角度 ， `单词符号` 是 `客观存在(物质对象)` 的 索引 ；
  -- 反过来,从 表达（现实存在空间->符号空间）角度，`客观存在(物质对象)`  是 `单词符号` 的索引，
  nouns = words "cat fish" -- 名词
  verbs = words "eat like" -- 动词
  -- 逻辑化：层级化 与 条理化， 
  --   层级化 就是 rule: lhs->rhs的形式进行递归分类;
  --   条理化 就是 用列表Ordered list: [x1,x2,x3] 的 Ordered 序列形式 去 指出 各种可性能 contingencies 具体细节
  -- 句子成分：句子结构的基本单元模块，就像 用 [头][颈][胸][躯干][四肢] 来描述 动物 一样，
  --   通过 将句子（idea）模块为 基本的 成分单元 [句子成分]，‘句子的构造’ 就体现出了 层级化的 思想。
  --   这样 idea 也就是 意识思想 就变成 是一种 ‘结构化的表达与描述方式’即 expression 亦即 所谓 的 思维逻辑
  -- 一个句子 就是一种意义单元 是一种都 句子成分的 组织方式：句子就是一种的的基本结构（意义信息单元的结构）
  subject = nouns -- 主语
  predicate = verbs -- 谓语
  object = nouns -- 宾语
  -- 信息生成：用 概念符号 替换 或者 填充  语言里句子的文法结构，即具体的指定句子成分（指称语义）:
  --   表达 某种 特定的 意义（认为选择&决策后的 客观存在 ，可理解为 特写镜头），
  --   即, 用 符号序列 映射某种  意识后化 的 现实世界（艺术化&科学归纳）。
  -- 语言的原理就是 ：人类认知&发展 即  认识 与 实践 的 工具化系统, 是一种 现实空间 <-> 意识空间 关系结构。
  -- 认识： 从客观现实 觉察&发现 出 对象实体，并将 其 
  --   1.概念化 成 意识概念(提出&确定 名词:符号与意义的指代;名称的核心 是 特性属性分组&标记区分identifier&namespace）
  --   2.结构化 即 分析出 概念之间 的 结构关系(提出&确定 动词:关系&性质; 动词的核心 是 时空关系interaction&relationship)
  --   所以 认知 就是 将 现象 表达&组织为 `概念与关系` 即 `逻辑` 的 `句子`.
  --     所谓 `句子` 是指 独立的思想意义单元idea 或者说 意识信息元，
  --     由此, 认知 可以 认为 是一个 从  现实空间 -> 意识空间 的 思考&学习 的 思维活动。
  -- 实践：是 `认识过程` 的 逆过程，将`逻辑` 即 意识空间 -> 现实空间 的 主动行为（主观能动）。
  --   如果说 认知 是 理解&创造 逻辑（概念关系）的设计活动，那么，
  --   实践 就是 把 意识概念&关系 的 `逻辑`  实现为 现实的 `物质的世界 ` 
  --    (具有价值意义的客观存在性的物质对象) 的 创造活动,  即 所谓的 `物质发展`： 这是  创造新物种 的 创新过程。
  -- 语言就是根据规则集合（序列）按照层级的方式进行组织: [sentence:[subject:nouns][predicate:verbs][object:nouns]]
  -- 这就是语言的形式逻辑性：即 树形结构的 1.层级分明，2.条例清晰 的 形式 即 语法特点。
  -- 语法 就是 用 形式逻辑 的方式 构造 句子（符号序列）, 去表达 `意义`(从 意识 -> 实际 的 实践空间)。
  --   用 符号序列 反映出 的 现实世界的 情况 的系统与方法。
  -- 词汇（单词：现实对象的符号索引） + 语法 （规则集合：层级化的树形结构，lhs -> rhs）
  -- descartes全排列：a 可以理解为 单词(物质对象的符号索引) 类型
  -- 语法（规则序列） 的 每条规则 可以表示为：lhs -> rhs ；若一个[lhs,rhs] 的类型定义为 [a], 
  --   那么， `规则序列`  或者说 语法系统 的 类型 就是 [[a]], 所以 语法的类型 也就是 [[a]] 了。
  -- 语言的意义空间 即 句子(类型[a])集合类型为[[a]]
  -- cph [ComPreHension：符号理解即意义空间，各种单词（各种可能性）组合方式contingency table], 
  -- 根据 语法 xx 生成 所有 该语法下的 各种 可能性 contingencies 即 理论上 意义空间 即 合乎语法规范的句子集合。
  -- 现实 的 语义 则 沦为 （cph xx） 的一个子集。类似于 自然数N 是 实数R的一个子集，N -> 现实， R -> (cph xx)，
  -- 这就是 cph 函数的理论意义
  cph :: [[a]] -> [[a]]
  cph xx = case xx of {(x:xs) -> [p:q | p <- x, q <- cph xs]; _ -> [[]]}
in 
  -- 中文与英语方式
  cph [subject, predicate, object] -- 使用一种语法结构 [subject][predicate][object] 构造一种 contingency table
  --  日语方式
  -- cph [subject, object, predicate] -- 使用一种语法结构 [subject][object][predicate]构造一种 contingency table
:}

-- reverse a string
rev :: String -> String
rev s = f [] s where
  f ret [] = ret
  f ret (x:xs) = f (x:ret) xs

-- get the reversed first n character
rfirst :: String -> Int -> String -> String 
rfirst ret _ [] = ret -- the finish status
rfirst ret n r@(x:xs)
  | n <= 0 = ret
  | otherwise = rfirst (x:ret) (n-1) xs

-- get the first n character
nfirst :: Int -> String -> String
nfirst n s = rev (rfirst [] n s)

-- get the last n character
nlast :: Int -> String -> String
nlast n s = rfirst [] n (rev s)

-- 头前n个元素
nhead n s= case s of 
  (x:xs) -> if n>0 then [x] ++ nhead (n-1) xs else []
  _ -> []

-- 头前n个元素
nhead n s 
  | n <=0 = []
  | otherwise = case s of 
      (x:xs) -> [x] ++ nhead (n-1) xs
      _ -> []
    
-- 尾部n个元素
nlast n = reverse . (nhead n) . reverse

-- 示例
nlast 3 [1..10]

-- split as string by char 
split :: String -> Char -> [String]
split s d = go [] [] s where
  go :: [String] -> String -> String -> [String]
  go ret current [] = if null current then ret else ret ++ [current] -- the finish status
  go ret current (x:xs)
    | x == d = go (ret ++ [current]) [] xs
    | otherwise = go ret (current ++ [x]) xs

-- split a string by string
split2 :: String -> String -> [String]
split2 s d = go [] [] s where
  go :: [String] -> String -> String -> [String]
  go ret current [] = if null current -- the finish status
    then ret 
    else (ret ++ [ if nlast (length d) current == d 
      then nfirst (length current - length d) current 
      else current ])
  go ret current (x:xs)
    | nlast (length d) current == d = go (ret ++ [(nfirst (length current - length d) current)]) [x] xs
    | otherwise = go ret (current ++ [x]) xs

-- 测试
split "1,2,3,4" ','

-- 测试2
split2 "1, 2, 3, 4" ", "