# --------------------------------------------------------------------------------------------------------------
# 分组就是在一个总体之中，从各个个体之中提取（抽象出）相应共性，并依据共性的不同进行进行相应的分类
# 每个分类就是对应的分组号（总体的成分结构），所以 分组 的分支就是 对 总体进行 分解，每个分组就是一种
# 相对与总体的部分的概念，递归的分组算法， 本质就是一种 Treeable的结构化思维,层级化,条理化的逻辑思维
# 所以 分组 是 数据分析的关键，分组的难度在于如何以一种创造性的方式对总体(数据)进行联想、关联出 蕴含在
# 思维深处（社会，环境，经济文化，文化，经验）中 相关的 价值&意义 的潜在 概念与逻辑（理论），并给出
# 形式化定义，即 创造&应用实际概念， 这就是 分析的结构性逻辑本质。
# --------------------------------------------------------------------------------------------------------------

# 读取数据
data <- read.csv(file.choose())

# 提取最新的价格数据，10天一个分组
tail(data,100)|>split((\(x) (x-1)%/%10+1)(1:100))

# 提取最新的价格数据，10天一个分组
tail(data,100) |> split(rep(1:10, rep(10,10)))

# 提取收盘价格
tail(data,100) |> split(rep(1:10,rep(10,10))) |> sapply(\(p) p['c']) 

# 任意次绘图
plots <- function(...) {
  fs <- list(...) # 提取参数
  op <- par(mfrow=c(length(fs), 1), mar=rep(2, 4)) # 缓存原有的图形参数
  lapply(fs, \(f) f()) # 批量调用绘图
  par(op) # 恢复图形参数
}

# melt 技巧, nrow(x) 行数目,length(x) 列数目,gl(nrow(x), 1, nrow(x)*length(x), labels=row.names(x)) 把x的行名称复制length(x)次数
( \(x) gl(nrow(x), 1, nrow(x)*length(x), labels=row.names(x)) |> cbind(id=_, stack(mtcars)) ) (mtcars)

# 收盘价格绘图
tail(data,100) |> split(rep(1:10,rep(10,10))) |> lapply(\(p) \() plot(p[['c']])) |> tail(2) |> do.call(plots,args=_)

# Points GroupNumbers 计算一个点序列ps的gn阶descartes product
# ps : points 基础点集向量
# gn : groups numer 分组数量
# rep(ps, gn) 构建线性点集序列；rep( seq(gn), rep(length(ps), gn) ) ：构建分组序列，seq(gn) 分组标号序列；length(ps) 各个分组的数据长度,
# 数据笛卡尔积， ps: points点集合 gn: group numer 分组阶数 
pgn <- function(ps=1:3, gn=length(ps)) rep(ps, gn) |> split( rep(paste0("x", seq(gn)), rep(length(ps), gn)) ) |> expand.grid()
# 三叉树模式:-1下跌,0不变,1增长
pgn(ps=-1:1)
#  三叉树模式：2阶
pgn(ps=-1:1, gn=2)

# 应用实例-投资5期的3叉树的收益情况收益分布：pmap_dbl(.,sum) 计算收益， group_by(sum 收益分组， summarise(n())  统计收益频数
library(tidyverse) # 导入数据处理框架 tidyverse，即 pmap, %>%, group_by, summarise, n() 等函数所在的包环境
pgn(-1:1, 5) %>% mutate(sum=pmap_dbl(.,sum)) |> group_by(sum) |> summarise(n()) %>% { # 注意, 对象是一个tibble : 'sum', 'n()'
  plot( ., type="b", # 绘制点线图
        xlab="收益情况", ylab="分布频数",
        main="三叉树模型-收益分布", sub="投资5期收益分布") # 绘图
  apply( ., 1, \(e) text(e[1], e[2], labels= paste0(e, collapse=" , ")) ) # 绘制坐标值：收益与频数
}

# 纯R语言实现
pgn(-1:1, 5) |> (\(x) transform(x, sum=apply(x, 1, sum))) () |> (\(x) split(x, x$sum)) () |> lapply(nrow) |>( \(y, x=names(y)) { # 数量频数统计, y是list
  plot(x, y, type="b", # 绘制点线图
        xlab="收益情况", ylab="分布频数",
        main="三叉树模型-收益分布", sub="投资5期收益分布") # 绘图
  p <- (\(nums=unlist(y), v=nums/sum(nums)) paste0(round(v*100, 2), "%")) () # percent 百分比
  text(x, y, labels=paste(x, y, p, sep=" , "))  # 绘制坐标值：收益与频数
}) ()

# iris-分组统计
split(iris[, -5], iris$Species) |> # 中心点，依据物种进行分类并获取对应分类中心点(维度坐标分组的均值向量）
  lapply(partial(apply, MARGIN=2, FUN=mean)) |> # 分组计算每种物种分类的均值
  Reduce(rbind, init=data.frame(), x=_) |> # 把各个分组进行连接，参见haskell的foldl
  transform(Species=paste0(rep("centeroids", compose(length, levels)(iris$Species)), "-", levels(iris$Species)) ) |> 
  structure(names=names(iris)) 

# iris-分组统计
aggregate(x=cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris, FUN=mean)

# -----------------------------------------------------------------------------------------------------------------
# 矩阵的行列分组, row, col 的使用。
# -----------------------------------------------------------------------------------------------------------------
# 矩阵的本质是连续的向量(即与向量没有本质不同），只是带有了维度信息而已 
> m0 <- 1:10 |> structure(dim=c(2, 5)); m0
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10
> row(m0)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    1    1    1    1
[2,]    2    2    2    2    2
> col(m0)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    1    2    3    4    5
> attributes(m0)
$dim
[1] 2 5

# 把一个矩阵按照行或者列进行分组
m <- matrix(1:10, ncol=5)

# m数据的建结构
> m <- matrix(1:10, ncol=5); m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10

#对矩阵按照行进行分组
split(m, row(m))

> split(m, row(m))
$`1`
[1] 1 3 5 7 9

$`2`
[1]  2  4  6  8 10

#对矩阵按照列进行分组
split(m, col(m))

> #对矩阵按照列进行分组
> split(m, col(m))
$`1`
[1] 1 2

$`2`
[1] 3 4

$`3`
[1] 5 6

$`4`
[1] 7 8

$`5`
[1]  9 10
# -----------------------------------------------------------------------------------------------------------------

