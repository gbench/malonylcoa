# -------------------------------------------------------------------------------------------------------------
# R 环境设置
# -------------------------------------------------------------------------------------------------------------
# 编辑 %R_HOME%/etc/Rprofile.site
# 比如：D:\sliced\develop\r\R-4.4.2\etc
# 在文件最后添加一下代码：
# 设置R的每日工作空间的代码（增加变量：rws_home:R语言-项目工作空间; dailywork_home:R语言-日工作/历史底稿空间）：
rws_home <- "F:/slicef/ws/rws"
dailywork_home <- sprintf("%s/%s", rws_home, Sys.Date()) 
if ( !dir.exists(dailywork_home) )  dir.create(dailywork_home)
setwd(dailywork_home)

# -------------------------------------------------------------------------------------------------------------
# 工作区位置
# -------------------------------------------------------------------------------------------------------------
# 查看工作区位置
getwd()

# 修改工作区位置:设置为文件所在的目录为工作空间
file.choose()|>sub("[^/\\]+$","",x=_)|>setwd()

# 查看工作区域中变量内容
ls()|>(\(x)lapply(x,\(v) substitute(get(v),list(v=v))|>eval())|>structure(names=x))()

#内容示例
#$dailywork_home
#[1] "F:/slicef/ws/rws/2024-12-23"
#
#$rws_home
#[1] "F:/slicef/ws/rws"

# -------------------------------------------------------------------------------------------------------------
# 数据目录
# -------------------------------------------------------------------------------------------------------------

# 查看当前目录下的所有文件包括目录
list.files(path='.', all.files=T, recursive=T, include.dirs=T)

#' 创建目录
#' @param x 目录集合
mkdir <- \(x) x |> strsplit("[,/\\]+") |> structure(names=x) |> lapply( \(e) Reduce(x=e, \(acc, a) paste(acc, a, sep="/"), accumulate=T) |> lapply(dir.create) )
# 一次创建多层级目录
mkdir(c("a/b/c", "d/e/f"))

# 递归删除中的所有文件，清空当前目录
#' @param x 目录集合
clear <- \(x=".") list.files(path=x , include.dirs=T, full.names=T) |> lapply(unlink, recursive=T)
# 清空a,d目录中的数据文件
clear(c('a', 'd'))

# 查看当前目录下的所有文件包括目录
list.files(path='.', all.files=T, recursive=T, include.dirs=T)

# 删除当前目录下的所有文件（隐藏文件除外）
clear()

# -------------------------------------------------------------------------------------------------------------
# 数据文件
# -------------------------------------------------------------------------------------------------------------
# 创建文件夹
"a/b/c"|>strsplit("/")|>unlist()|>Reduce(x=_,\(acc,a)paste0(acc,"/",a),accumulate=T)|>lapply(dir.create)

# 查看工作区中的文件
list.files()

# 查看工作区中的csv数据文件
paste(getwd(),"/",list.files(recursive=T,pattern="\\.csv$"),sep="")

# 写入文件
file.3rd <- "a/b/c/data3rd.csv" # 文件名称
(\(n=3,x=rep(seq(n),n))x|>split(rep(seq(n),rep(n,n)))|>expand.grid()|>structure(names=paste0("x",seq(n))))()|>write.csv(file.3rd,row.names=F) # 写入3级阵列数据

# 读取文件
data.3rd <- read.csv(file.3rd,header=T);data.3rd # 读取并打印

# 单开文件对话框选择文件
file <- file.choose();file

# 删除文件夹&文件
unlink("a",recursive=T) # 递归删除

# 查看工作区中的文件
list.files()

# -------------------------------------------------------------------------------------------------------------
# RDS（R对象文件） 文件的读取
# saveRDS and readRDS provide the means to save a single R object to a connection (typically a file) and to restore the object
# -------------------------------------------------------------------------------------------------------------

#  导出指定环境env中的数据变量到指定目标位置x，默认为环境为 .GlobalEnv
(\(x='objects', env=sys.frame()) {
  if(!dir.exists(x)) dir.create(x); 
  lapply( ls(env), \(e, object=get(e), file=paste0(x, '/',e, '.rds')) saveRDS(object, file) ) # 对象保存
}) ()

# 导入指定目标位置x中的rds对象到指定的目标环境env，默认为环境为 .GlobalEnv
(\(x='objects', env=sys.frame()) {
  if(!dir.exists(x)) stop(sprintf('%s目录不存在!',x))
  lapply( list.files(x, pattern="\\.rds$", full.names=T), \(file, name=sub(".+[/\\]([^/\\]+)\\.rds$", "\\1", file)) assign(name, readRDS(file), env) )
}) ()

# -------------------------------------------------------------------------------------------------------------
# RDA文件的读取
# -------------------------------------------------------------------------------------------------------------

# 删除工作区中的数据文件
list.files()|>lapply(unlink)

# 把当前会话中的对象，导出到文件
save(list=ls(), file="allinone.rda")

# 清空当前工作会话
rm(list=ls())

# 在重新导入进来
load(file="allinone.rda")

# 查看会话中的对象
ls()

# 查看工作区中的文件
list.files()

# -------------------------------------------------------------------------------------------------------------
# RDA文件的读取
# https://www.thecoatlessprofessor.com/programming/r/saving-and-reading-r-objects/
# -------------------------------------------------------------------------------------------------------------
Formats :  Overview of the different kinds of R binary files that are available.

.rda/.RData is  "R Data"
  Description: Save and restore one or more named objects into an environment.
  Notes: Useful for storing workspaces and multiple R objects as-is. As an example, see the save.image() function called upon closing every R session.
.rds is a “R Data Single”
  Description: Save and load a single R object to a binary file.
  Notes: Great for exporting a single result and loading it into a new variable.
.rdx and .rdb
  Description: .rdx contains the index while .rdb stores objects for an R Database used in Lazy Loading
  Notes: Primarily for R's internal usage. Though, benefits exist around delayed assignment by the use of promises for large data.

# 清空目录
list.files() |> lapply(unlink, recursive=T)

# 把当前会话的对象全部存入一个新的环境
my_lazy_env <- as.list(environment()) |> list2env(parent=emptyenv())

path <- "data-db" # 目标目录
filebase <- paste0(path,  "/my_lazyload_db") 

# 创建数据文件目录
if(!dir.exists(path)) dir.create(path)
    
# Save objects inside a LazyLoadDB： 把对象存入一个LazyLoadDB
# Requires an environment and the name of a file. 需要一个环境以及一个文件名
# 这里使用:::调用非公开导出的R库函数
tools:::makeLazyLoadDB(my_lazy_env, filebase);
    
print(ls())
# 清空当前会话环境
rm(list = setdiff(ls(),c('path','filebase')))
    
# Load objects from disk：重新加载 
lazyLoad(filebase)

#查看当前空间中的数据对象
ls()

# -------------------------------------------------------------------------------------------------------------
# 导出函数源文件
# -------------------------------------------------------------------------------------------------------------
#' 导出指定函数符号到文件，以方便查看代码
#' @param x  函数符号或是字符串名称
export <- \(x) {
  nm <- if(is.character(x)) x else substitute(x) |> deparse() # 符号名称
  (if(is.character(x)) eval(as.symbol(x)) else x) |> deparse() |> (\(x, f=file(paste0(nm, '.R'), 'w')) {
    on.exit(close(f)) # 退出时候关闭文件
    cat(paste(x, collapse='\n'), file=f) # 把符号表达式写入文件
  }) ()
}

# 导出符号
export(library)
# 导出字符串
export('install.packages')

# 一个library 函数的导出
library|>deparse()|>paste(collapse="\n")|>(\(x,f=file('library.R','w')){on.exit({close(f);print('close')}); cat(x,file=f)})()

# -------------------------------------------------------------------------------------------------------------
# DCF 文件的读取
# DCF is a simple format for storing databases in plain text files that can easily be directly read and written by humans. 
# DCF is used in various places to store R system information, like descriptions and contents of packages.
# -------------------------------------------------------------------------------------------------------------
#' read a dcf file
#' NB: the DESCRIPTION  of a package is a dcf format(1*n matrix), so we could use it as the test case
#' @param pkg package name
#' @param file DCF file
(\(pkg, file=paste0(.libPaths(), "/", pkg,"/DESCRIPTION" )) read.dcf(file) ) ('shiny') |> 
#' 
#'@param x is a matrix object,so it can use the colnames to extract its field
(\(x) {
  lapply(colnames(x),\(i) x[,i])
}) ()

# read pkg's authors
pkgdesc <- (\(pkg, file=paste0(.libPaths(), "/", pkg,"/DESCRIPTION" )) read.dcf(file) ) ('shiny') 
pkgdesc[,'Authors@R'] |> parse(text=_) |> eval()

#' 文件读写,把DESCRIPTION文件中的数据写入文件pkgdesc.data
#' file("pkgdesc.data","w") 打开文件
#' on.exit(close(f)) 退出时候关闭文件
paste0(.libPaths(),'/ggplot2/DESCRIPTION') |> read.dcf() |> (\(pkgdesc, f=file("pkgdesc.ggplot2","w")) { on.exit(close(f)); cat(pkgdesc, file=f) }) ()

# -------------------------------------------------------------------------------------------------------------
# 元编程
# -------------------------------------------------------------------------------------------------------------
# 偏函数表达式pf的逆向管道计算（函数复合f.g.h）的演示示例
local({
  library(data.table) # fread 所在的库
  
  # 像lapply(FUN=fread) 这样的表达式被称为偏函数表达式pf, 因为它缺少一个参数X
  # 这个参数需要在eval_pfs的时候进行动态添加,于是这里提供一个使用偏函数表达式实现函数curry化的简单的计算方式
  # pfs：偏函数表达式向量或列表，x0：初始参数, default：没有参数时候，默认参数的参数名称
  eval_pfs <- \(pfs, x0, default='x') { # 元计算
    Reduce(\(pf, x) { #  pf偏函数表达式, value表达式参数
      (\ (keys, j=match(names(pf)[-1], keys) ) { # 初始函数, j为pf提供的参数向量
        (if( length(j) < 1 ) keys[1] else keys[-j][1]) |> # -j 表示pf没有提供的参数向量, 选区第一个做诶空缺的参数名key
          (\ (key) if(is.null(key) | is.na(key)) default else key) () |> # 使用默认default 替代空缺的参数key
          (\ (key) pf[[key]] <<- x) () # 为偏函数表达式补充参数key的值为x
        eval(pf) # 计算
      }) (names(formals(get(pf[[1]])))) # 
    }, x=pfs, init=x0, right=T ) # 使用Reduce模拟逆向管道（函数复合f.g.h）计算
  } # 计算偏函数表达式
  
  # 偏函数表达式的计算(以逗号表达式构造表达式列表作为管道)，lapply(FUN=fread) 被称为偏函数表达式(缺少一个参数X,会在eval_pfs运算的时逐次传递的动态添加)
  expression( rbindlist(), lapply(FUN=fread), head(n=5), grep(pattern="ma",value=T) ) |> eval_pfs( list.files(pattern="\\.csv$") ) # 读取前5个甲醛ma期货合约的数据
})
