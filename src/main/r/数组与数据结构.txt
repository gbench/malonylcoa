#数据结构的基本原理，就是把一个整体（数据对象）的各个部分，用编号索引的方式进行编码。

# 一段数据：有16个数据元素的自然数序列
> structure(1:16)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16

#数据索引访问,访问第八号元素
structure(1:16)[8]

# 把一段数据，分成两段，dim=c(段长度,段数)
> structure(1:16,dim=c(8,2))
     [,1] [,2]
[1,]    1    9
[2,]    2   10
[3,]    3   11
[4,]    4   12
[5,]    5   13
[6,]    6   14
[7,]    7   15
[8,]    8   16

# 继续分解，二次分解第一段[,1],第二段[,2]继续分解
# [,1,1]二次分解第一段的第一段；[,2,1]二次分解第一段的第二段
> structure(1:16,dim=c(4,2,2))
, , 1

     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8

, , 2

     [,1] [,2]
[1,]    9   13
[2,]   10   14
[3,]   11   15
[4,]   12   16

# 继续分解，三次分解
> structure(1:16,dim=c(2,2,2,2))
, , 1, 1  # （二次分解的第一段，一次分解的第一段）

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1  # （二次分解的第二段，一次分解的第一段）

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2  # （二次分解的第一段，一次分解的第二段）

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2 # （二次分解的第二段，一次分解的第二段）

     [,1] [,2]
[1,]   13   15
[2,]   14   16

# 数组结构的表示方法 [分段内索引段内索引,n次分级索引,...,二次分解索引,一次分解索引]
# （二次分解的第二段，一次分解的第二段）的段内元素的访问
> structure(1:16,dim=c(2,2,2,2))[2,2,2,2]
[1] 16
> structure(1:16,dim=c(2,2,2,2))[1,2,2,2]
[1] 15
> structure(1:16,dim=c(2,2,2,2))[2,1,2,2]
[1] 14
> structure(1:16,dim=c(2,2,2,2))[1,1,2,2]
[1] 13

# 分组处理，c(1,2,3) 输出结果的数据结构（形状）:c(1,2,3) 表示按照第一个第二第三维度度进行展开。
# 相当于 for (i in seq(dim[1])) for(j in seq(dim[2])) for (k in seq(dim[3])) FUN(X[i,j,k,])
X=structure(1:16,dim=c(2,2,2,2))
dim = c(2,2,2,2)
FUN=\(x) range(x) |> cat(paste(collapse=",",";"))
for (i in seq(dim[1])) for(j in seq(dim[2])) for (k in seq(dim[3])) FUN(X[i,j,k,])

#apply的使用
> apply(X=structure(1:16,dim=c(2,2,2,2)),c(1,2,3),FUN=\(x) range(x)|>paste(collapse=","))
, , 1

     [,1]   [,2]  
[1,] "1,9"  "3,11"
[2,] "2,10" "4,12"

, , 2

     [,1]   [,2]  
[1,] "5,13" "7,15" #    (7,15):[1,2,2]-->7:[1,2,2,1],15:[1,2,2,2]
[2,] "6,14" "8,16"

# 数据结构
> X<-structure(1:24,dim=c(4,3,2));X
, , 1

     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12

, , 2

     [,1] [,2] [,3]
[1,]   13   17   21
[2,]   14   18   22
[3,]   15   19   23
[4,]   16   20   24

# 3 列两行
> apply(X,c(3,2),paste,collapse=",")
     [,1]          [,2]          [,3]         
[1,] "1,2,3,4"     "5,6,7,8"     "9,10,11,12" 
[2,] "13,14,15,16" "17,18,19,20" "21,22,23,24"

# 两行3列
> apply(X,c(2,3),paste,collapse=",")
     [,1]         [,2]         
[1,] "1,2,3,4"    "13,14,15,16"
[2,] "5,6,7,8"    "17,18,19,20"
[3,] "9,10,11,12" "21,22,23,24"

# -------------------------------------------------------------------------------------------------------------
# IRIS 数据样例
# -------------------------------------------------------------------------------------------------------------

# 把一个数据序列，R称之为较长的列向量，进行切分设计出有层级有结构的多维子向量。
# 然后通过指定维度索引使用apply组函数进行数据处理这个R进行数据处理的基本办法。
# 所以数据分解切分，这是数据处理的基本功。
# 数据数据分割,split是硬切他是把一捆向量进行拦腰横切,
# 而设置dim=c(xn,...,x2,x1)属性更像是折叠.先把一个列向量折成x1段子向量,
# 然后每段字向量再这层x2段,如此反复折叠直到折叠进入阶层n,那内部n的字向量给折叠成xn段为止。
# spllit和sapply(data.matrix) 会把拦腰切出的小捆向量给串接成一个向量捆（矩阵：连续向量的折叠形式）
# 往后我们就可以采用设置的dim向量的形式进行高位数组折叠了

# 维度组织函数根据给出的多维数据x,以及头前的维度长度序列...,自动算出最后一维度空间长度.组织成dim维度向量。
(\(x,...) c(prod(dim(x))/prod(c(...)), ...))(iris,5,3)
# 切分示例
split(iris,iris$Species) |> sapply(data.matrix) |> array(dim=c(50,5,3))
# 启动求维度数混合split与dim维度折叠 双手并用的 分解&结构化数据。
# 合并成通用函数,x:源数据, i:分类数据索引 
(\(x,i) x[,-i] |> split(x[,i]) |> sapply(data.matrix) |> (\(x,...) array(x,dim=c(prod(dim(x))/prod(c(...)), ...)))(4,3) |>
  structure(dimnames=list(NULL,names(x)[-i],unique(x[,i]))))(iris,5) -> iris.arr
# 画图
matplot(iris.arr[, "Petal.Length",], iris.arr[, "Petal.Width",], pch = "SCV",
        col = rainbow(3, start = 0.8, end = 0.1),
        sub = paste(c("S", "C", "V"), dimnames(iris.arr)[[3]],
                    sep = "=", collapse= ",  "),
        main = "Fisher's Iris Data")


# 提取数据
iris |> (\(x,...) x[x[,5]%in%c(...),])("setosa","versicolor","virginica")

# 提取变量范围
iris |> (\(x,...) x[x[,5]%in%c(...),-5])("setosa","versicolor") |> sapply(range) |> t()

#  通过outer去建立结构：需要注意FUN，也就是示例中paste返回的结构是一个长度为25向量，而不是一个单值。
> outer(1:5, 1:5, paste, sep="*")
     [,1]  [,2]  [,3]  [,4]  [,5] 
[1,] "1*1" "1*2" "1*3" "1*4" "1*5"
[2,] "2*1" "2*2" "2*3" "2*4" "2*5"
[3,] "3*1" "3*2" "3*3" "3*4" "3*5"
[4,] "4*1" "4*2" "4*3" "4*4" "4*5"
[5,] "5*1" "5*2" "5*3" "5*4" "5*5"

# 结果是一个 矩阵&数组
> outer(1:5, 1:5, paste, sep="*") |> class()
[1] "matrix" "array" 

# 建立表达式并进行计算
outer(1:5, 1:5, paste, sep="*") |> apply(1, paste, collapse="+") |> sapply((\(x) parse(t=x) |> eval()))

# 计算结果：拼接成表达式并给予计算
> outer(1:5, 1:5, paste, sep="*") |> apply(1, paste, collapse="+") |> sapply((\(x) parse(t=x) |> eval()))
1*1+1*2+1*3+1*4+1*5 2*1+2*2+2*3+2*4+2*5 3*1+3*2+3*3+3*4+3*5 4*1+4*2+4*3+4*4+4*5 5*1+5*2+5*3+5*4+5*5 
                 15                  30                  45                  60                  75 
# 使用Reduce 实现管道运算
> outer(1:5, 1:5, paste, sep="*") |> apply(1, paste, collapse="+") |> sapply(\(line) Reduce(\(f,x) f(x), c(eval, str2lang), line, right=T))
1*1+1*2+1*3+1*4+1*5 2*1+2*2+2*3+2*4+2*5 3*1+3*2+3*3+3*4+3*5 4*1+4*2+4*3+4*4+4*5 5*1+5*2+5*3+5*4+5*5 
                 15                  30                  45                  60                  75 

# 使用专用环境（沙盒） list(x=1:5) |> list2env() 进行运算，不在R_GlobalEnv 中进行运算
> evalq(outer(x, x, paste, sep="*") |> apply(1, paste, collapse="+") |> sapply((\(x) parse(t=x) |> eval())) , list(x=1:5) |> list2env())
1*1+1*2+1*3+1*4+1*5 2*1+2*2+2*3+2*4+2*5 3*1+3*2+3*3+3*4+3*5 4*1+4*2+4*3+4*4+4*5 5*1+5*2+5*3+5*4+5*5 
                 15                  30                  45                  60                  75 
# ---------------------------------------------------------------------------------------------------------------------------------------------
# 高维数组的本质就是一种用连续空间去存放树形关系的数据结构，
# 准确的说是任意一个n维度数组都对应着一个n层高的平衡树，每个层级对应的一个维度，该层级节点的子节点数等于该维度的长度。
# 例如：一个 
# dimnames <- strsplit(c(A="a1,a2,a3,a4",B="b1,b2,b3",C="c1,c2"), ","); # 结构的数组。是一个 
# dim <- sapply(dimnames, length); # 即c(4,3,2) 数据立方体cube。 
# xs <- array(seq(prod(dim)),dimnames=dimnames,dim=dim); ftable(xs); # 他可以视为一棵3层平衡树.
# 也就是从根到叶子节点的路径分为/A/B/C3;层级 /A 段的节点数量是A的维度长度4; 层级/A/B段的节点数量是B的维度长度3
# 层级 /A/B/C段的节点数量是C的维度长度2
# 典型数据示例： UCBAdmissions 
# ---------------------------------------------------------------------------------------------------------------------------------------------
# 基本信息：class
> UCBAdmissions |> class()
[1] "table"

# mode
> UCBAdmissions |> mode()
[1] "numeric"

# type
> UCBAdmissions |> typeof()
[1] "double"

# atomic
> UCBAdmissions |> is.atomic()
[1] TRUE

# array
> UCBAdmissions |> is.array()
[1] TRUE

# matrix
> UCBAdmissions |> is.matrix()
[1] FALSE

# 结构
> UCBAdmissions |> str()
 'table' num [1:2, 1:2, 1:6] 512 313 89 19 353 207 17 8 120 205 ...
 - attr(*, "dimnames")=List of 3
  ..$ Admit : chr [1:2] "Admitted" "Rejected"
  ..$ Gender: chr [1:2] "Male" "Female"

# 维度信息
> dimnames(UCBAdmissions)
$Admit
[1] "Admitted" "Rejected"

$Gender
[1] "Male"   "Female"

$Dept
[1] "A" "B" "C" "D" "E" "F"

# 高维数据的存储结构
> edit(UCBAdmissions)
structure(c(512, 313, 89, 19, 353, 207, 17, 8, 120, 205, 202, 
391, 138, 279, 131, 244, 53, 138, 94, 299, 22, 351, 24, 317), dim = c(2L, 
2L, 6L), dimnames = structure(list(c("Admitted", "Rejected"), 
    c("Male", "Female"), c("A", "B", "C", "D", "E", "F")), names = c("Admit", 
"Gender", "Dept")), class = "table")

# 数据内容
> UCBAdmissions
, , Dept = A

          Gender
Admit      Male Female
  Admitted  512     89
  Rejected  313     19

, , Dept = B

          Gender
Admit      Male Female
  Admitted  353     17
  Rejected  207      8

, , Dept = C

          Gender
Admit      Male Female
  Admitted  120    202
  Rejected  205    391

, , Dept = D

          Gender
Admit      Male Female
  Admitted  138    131
  Rejected  279    244

, , Dept = E

          Gender
Admit      Male Female
  Admitted   53     94
  Rejected  138    299

, , Dept = F

          Gender
Admit      Male Female
  Admitted   22     24
  Rejected  351    317


#数据遍历
apply(c("Dept","Addmit"),\(xs) xs[1]/xs[2])

> UCBAdmissions |> apply(c("Dept","Admit"),\(xs) xs[1]/xs[2])
    Admit
Dept   Admitted   Rejected
   A  5.7528090 16.4736842
   B 20.7647059 25.8750000
   C  0.5940594  0.5242967
   D  1.0534351  1.1434426
   E  0.5638298  0.4615385
   F  0.9166667  1.1072555


#  高位数组 遍历,特别需要注意的就是 append(list(xs),is)) 用于构造一个(xs,is[1],is[2],...) 模样的数据结构。
evalq(expand.grid(dimnames(xs)) |> apply(1, \(is) do.call(`[`, append(list(xs), is)) |> (\(v) c(is, value=v))()) |> t(), list(xs=UCBAdmissions))

# 展开成列表形式，这样就可以做数据透视表的运算了。
> evalq(expand.grid(dimnames(xs)) |> apply(1, \(is) do.call(`[`, append(list(xs), is)) |> (\(v) c(is, value=v))()) |> t(), list(xs=UCBAdmissions))
      Admit      Gender   Dept value
 [1,] "Admitted" "Male"   "A"  "512"
 [2,] "Rejected" "Male"   "A"  "313"
 [3,] "Admitted" "Female" "A"  "89" 
 [4,] "Rejected" "Female" "A"  "19" 
 [5,] "Admitted" "Male"   "B"  "353"
 [6,] "Rejected" "Male"   "B"  "207"
 [7,] "Admitted" "Female" "B"  "17" 
 [8,] "Rejected" "Female" "B"  "8"  
 [9,] "Admitted" "Male"   "C"  "120"
[10,] "Rejected" "Male"   "C"  "205"
[11,] "Admitted" "Female" "C"  "202"
[12,] "Rejected" "Female" "C"  "391"
[13,] "Admitted" "Male"   "D"  "138"
[14,] "Rejected" "Male"   "D"  "279"
[15,] "Admitted" "Female" "D"  "131"
[16,] "Rejected" "Female" "D"  "244"
[17,] "Admitted" "Male"   "E"  "53" 
[18,] "Rejected" "Male"   "E"  "138"
[19,] "Admitted" "Female" "E"  "94" 
[20,] "Rejected" "Female" "E"  "299"
[21,] "Admitted" "Male"   "F"  "22" 
[22,] "Rejected" "Male"   "F"  "351"
[23,] "Admitted" "Female" "F"  "24" 
[24,] "Rejected" "Female" "F"  "317"

# 数据透视
evalq(expand.grid(dimnames(xs)) |> apply(1, \(is) do.call(`[`, append(list(xs), is)) |> (\(v) c(is, value=v))()) |> t() |> 
(\(data ) aggregate(as.numeric(value) ~ Dept+Gender+Admit, data=data, sum) ) ()
, list(xs=UCBAdmissions))

> evalq(expand.grid(dimnames(xs)) |> apply(1, \(is) do.call(`[`, append(list(xs), is)) |> (\(v) c(is, value=v))()) |> t() |> 
+ (\(data ) aggregate(as.numeric(value) ~ Dept+Gender+Admit, data=data, sum) ) ()
+  , list(xs=UCBAdmissions))
   Dept Gender    Admit as.numeric(value)
1     A Female Admitted                89
2     B Female Admitted                17
3     C Female Admitted               202
4     D Female Admitted               131
5     E Female Admitted                94
6     F Female Admitted                24
7     A   Male Admitted               512
8     B   Male Admitted               353
9     C   Male Admitted               120
10    D   Male Admitted               138
11    E   Male Admitted                53
12    F   Male Admitted                22
13    A Female Rejected                19
14    B Female Rejected                 8
15    C Female Rejected               391
16    D Female Rejected               244
17    E Female Rejected               299
18    F Female Rejected               317
19    A   Male Rejected               313
20    B   Male Rejected               207
21    C   Male Rejected               205
22    D   Male Rejected               279
23    E   Male Rejected               138
24    F   Male Rejected               351

# 透视表
> ftable(UCBAdmissions)
                Dept   A   B   C   D   E   F
Admit    Gender                             
Admitted Male        512 353 120 138  53  22
         Female       89  17 202 131  94  24
Rejected Male        313 207 205 279 138 351
         Female       19   8 391 244 299 317

# 调整维度
ftable(UCBAdmissions |> aperm(c(3, 1, 2)))
# 使用维度名称进行调整
ftable(UCBAdmissions |> aperm(c("Dept", "Admit", "Gender")))

>
              Gender Male Female
Dept Admit                      
A    Admitted         512     89
     Rejected         313     19
B    Admitted         353     17
     Rejected         207      8
C    Admitted         120    202
     Rejected         205    391
D    Admitted         138    131
     Rejected         279    244
E    Admitted          53     94
     Rejected         138    299
F    Admitted          22     24
     Rejected         351    317

# 使用维度名称进行调整
ftable(UCBAdmissions, row.vars=c("Dept","Admit"))
# 指定行列
ftable(UCBAdmissions, row.vars=c("Dept","Admit"), col.vars=c("Gender"))

>
              Gender Male Female
Dept Admit                      
A    Admitted         512     89
     Rejected         313     19
B    Admitted         353     17
     Rejected         207      8
C    Admitted         120    202
     Rejected         205    391
D    Admitted         138    131
     Rejected         279    244
E    Admitted          53     94
     Rejected         138    299
F    Admitted          22     24
     Rejected         351    317

# 多维数组
evalq((\(dim=sapply(dimnames, length)) array(1:prod(dim), dim, dimnames)) () |> ftable(col.vars=c("字母", "希腊")),
 list(dimnames=strsplit(c(天干="子丑寅卯", 地支="甲乙丙丁", 字母="ABCDE", 希腊="αβγδ"),"")))

> evalq((\(dim=sapply(dimnames, length)) array(1:prod(dim), dim, dimnames)) () |> ftable(col.vars=c("字母", "希腊")),
+  list(dimnames=strsplit(c(天干="子丑寅卯", 地支="甲乙丙丁", 字母="ABCDE", 希腊="αβγδ"),"")))
          字母   A               B               C               D               E            
          希腊   α   β   γ   δ   α   β   γ   δ   α   β   γ   δ   α   β   γ   δ   α   β   γ   δ
天干 地支                                                                                     
子   甲          1  81 161 241  17  97 177 257  33 113 193 273  49 129 209 289  65 145 225 305
     乙          5  85 165 245  21 101 181 261  37 117 197 277  53 133 213 293  69 149 229 309
     丙          9  89 169 249  25 105 185 265  41 121 201 281  57 137 217 297  73 153 233 313
     丁         13  93 173 253  29 109 189 269  45 125 205 285  61 141 221 301  77 157 237 317
丑   甲          2  82 162 242  18  98 178 258  34 114 194 274  50 130 210 290  66 146 226 306
     乙          6  86 166 246  22 102 182 262  38 118 198 278  54 134 214 294  70 150 230 310
     丙         10  90 170 250  26 106 186 266  42 122 202 282  58 138 218 298  74 154 234 314
     丁         14  94 174 254  30 110 190 270  46 126 206 286  62 142 222 302  78 158 238 318
寅   甲          3  83 163 243  19  99 179 259  35 115 195 275  51 131 211 291  67 147 227 307
     乙          7  87 167 247  23 103 183 263  39 119 199 279  55 135 215 295  71 151 231 311
     丙         11  91 171 251  27 107 187 267  43 123 203 283  59 139 219 299  75 155 235 315
     丁         15  95 175 255  31 111 191 271  47 127 207 287  63 143 223 303  79 159 239 319
卯   甲          4  84 164 244  20 100 180 260  36 116 196 276  52 132 212 292  68 148 228 308
     乙          8  88 168 248  24 104 184 264  40 120 200 280  56 136 216 296  72 152 232 312
     丙         12  92 172 252  28 108 188 268  44 124 204 284  60 140 220 300  76 156 236 316
     丁         16  96 176 256  32 112 192 272  48 128 208 288  64 144 224 304  80 160 240 320
> 

# ---------------------------------------------------------------------------------------------------------------------------------------------
# 数组索引的读取
# ---------------------------------------------------------------------------------------------------------------------------------------------
# 一维度索引转多维索引, xs:高维数组; i:一维度索引
ids <- \(xs)  \(i) { # 为xs设计一维索引转高维索引的的函数
  rs <- c() # 返回值向量
  strides <- rev(cumprod(dim(xs)))[-1]; # 索引跨度,列顺序优先，后面索引在内存排序上优先前面的索引。
  .i <- i-1 # 索引改为偏移
  for(j in seq(length(strides))) { # 遍历索引跨度，strides[j]表示第j维度所占据的连续区域(内存单元的数量)长度。
    rs <- c(.i %/% strides[j], rs) # 列顺序优先
    .i <- .i %% strides[j] 
  }
  c(.i, rs) + 1 # 偏移该索引
}

# 读取索引
(\(xs) sapply(seq_along(xs), \(i) c( ids(xs)(i), do.call(`[`, args=append( list(xs), ids(xs)(i) )) ) ) |> t() ) (UCBAdmissions)

>
      [,1] [,2] [,3] [,4]
 [1,]    1    1    1  512
 [2,]    2    1    1  313
 [3,]    1    2    1   89
 [4,]    2    2    1   19
 [5,]    1    1    2  353
 [6,]    2    1    2  207
 [7,]    1    2    2   17
 [8,]    2    2    2    8
 [9,]    1    1    3  120
[10,]    2    1    3  205
[11,]    1    2    3  202
[12,]    2    2    3  391
[13,]    1    1    4  138
[14,]    2    1    4  279
[15,]    1    2    4  131
[16,]    2    2    4  244
[17,]    1    1    5   53
[18,]    2    1    5  138
[19,]    1    2    5   94
[20,]    2    2    5  299
[21,]    1    1    6   22
[22,]    2    1    6  351
[23,]    1    2    6   24
[24,]    2    2    6  317
> 

# 索引翻译
(\(xs) (\(nms) sapply(seq_along(xs), \(i) ids(xs)(i) |> (\(id) lapply(seq_along(id),\(j) nms[[j]][id[j]])) () |> append(xs[i]))) (dimnames(xs)) |> t()) (UCBAdmissions)

>
      [,1]       [,2]     [,3] [,4]
 [1,] "Admitted" "Male"   "A"  512 
 [2,] "Rejected" "Male"   "A"  313 
 [3,] "Admitted" "Female" "A"  89  
 [4,] "Rejected" "Female" "A"  19  
 [5,] "Admitted" "Male"   "B"  353 
 [6,] "Rejected" "Male"   "B"  207 
 [7,] "Admitted" "Female" "B"  17  
 [8,] "Rejected" "Female" "B"  8   
 [9,] "Admitted" "Male"   "C"  120 
[10,] "Rejected" "Male"   "C"  205 
[11,] "Admitted" "Female" "C"  202 
[12,] "Rejected" "Female" "C"  391 
[13,] "Admitted" "Male"   "D"  138 
[14,] "Rejected" "Male"   "D"  279 
[15,] "Admitted" "Female" "D"  131 
[16,] "Rejected" "Female" "D"  244 
[17,] "Admitted" "Male"   "E"  53  
[18,] "Rejected" "Male"   "E"  138 
[19,] "Admitted" "Female" "E"  94  
[20,] "Rejected" "Female" "E"  299 
[21,] "Admitted" "Male"   "F"  22  
[22,] "Rejected" "Male"   "F"  351 
[23,] "Admitted" "Female" "F"  24  
[24,] "Rejected" "Female" "F"  317 
> 

