# ‌元编程（Metaprogramming）‌是一种编程范式，允许程序在运行时生成或修改代码。
# 元编程通过操作程序实体，在编译时生成运行时所需的常数、类型和代码。它通过利用编程语言提供的模板机制，
# 在编译时生成程序，然后再进行编译，最终生成目标代码。‌

# 加载库
library(data.table)

# 元编程的特点就是它可以通过编写不符合R标准的语法结构，通常是一系列更为精简的DSL式样的代码模板片段，而去进行的编程设计。
# 比如：hist(), getElement('LastPrice'), rbindlist(), lapply(FUN=read.csv) ，head(n=3)，。。。 代码片段（R的叫法为call对象），
# 注意：他们都缺少目标操作对象即参数ｘ的非法R语言结构，类似于机械设计中的零部件，元编程就是从拿着这些零件去装配目标程序的搭乐高积木的游戏。
# 元编程的目的&技巧，就是将x给填写进片段然后将其组织连接，以生成合法的R语言程序。所谓技巧就是以用什么片段，以什么方式去填写，按照什么步骤，
# 如何通过程序的编码手段去动态的组合。
#
# 此处的简单示例将以Reduce 规约的形式去量变地组合引起质变的形式来复合出新的代码。具体来说就是
# 以规约的形式去构造源码层级上的演绎效果的元编程模式（辩证关系：高阶的Reduce规约实现了低阶的演绎，
# 代码层级生成宏替换式的嵌套组合）。由此就实现了让程序以组织代码片段（代码功能模块）的形式去指挥源码（最终程序）的生成。
# 
# 生成函数复合表达式,逆向管道，之所以使用逆向管道，是为了让打印出的生成的中间代码数学传统的f.g.h的顺序的思维习惯相一致
expression( hist(), getElement('LastPrice'), rbindlist(), lapply(FUN=read.csv), head(n=3), sort(decreasing=T), grep(pattern="\\.csv$", value=T) ) |> # 管道代码
  Reduce(\(f, x, keys=names(formals(get(f[[1]]))), k=setdiff(keys, names(f[-1]))[1] ) {
       f[[k]]<-x; print(f); f # 编辑表达式;生成程序代码;打印代码表达式&返回生成的表达式
  } , x=_, init=quote(list.files()), right=T) |> # 生成表达式语句
eval() # 运行程序生成的代码